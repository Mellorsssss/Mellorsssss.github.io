<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CS143 PA1 实验过程</title>
    <link href="/2021/01/28/CS143-PA1/"/>
    <url>/2021/01/28/CS143-PA1/</url>
    
    <content type="html"><![CDATA[<p>cs143在线课程的第一次PA十分简单，熟悉<code>cool</code>语言，并实现一个简单的Stack Machine。</p><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>官方提供了一个unbuntu 10.05版本的上古虚拟机（真的是上古，<code>sudo apt-get update</code>都已经404了），虚拟机内提供了实验所需的环境；另一种方式是直接使用32位（如果使用64位的机器，需要自己折腾一下spim的安装）的linux虚拟机进行实验。</p><p>我采取了第二种配置方式，因为自己的32bit虚拟机上有vscode，比起vim更加人性化，阅读源码也比较方便。</p><h3 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h3><p>PA1非常简单，实现以下语言的解释器：</p><p><img src="https://cdn.jsdelivr.net/gh/Mellorsssss/PictureBed/img/20210128203630.png" alt="stackmachine"></p><p><code>cool</code>语言没有高级数据结构，所以首先需要实现一个栈（使用<code>list</code>实现即可）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Stack</span></span>&#123;<br>   mystack : List&lt;-<span class="hljs-keyword">new</span> List;<br><br>   push(s: String): Object&#123;<br>      mystack &lt;- mystack.cons(s)<br>   &#125;;<br><br>   pop(): Object &#123;<br>      mystack &lt;- mystack.tail()<br>   &#125;;<br><br>   top(): String &#123;<br>      <span class="hljs-keyword">if</span> mystack.isNil() then<br>         <span class="hljs-string">&quot;&quot;</span><br>      <span class="hljs-keyword">else</span><br>         mystack.head()<br>      fi&#125;;<br><br>   list():List&#123;mystack&#125;;<br><br>&#125;;<br></code></pre></td></tr></table></figure><p>接着使用<code>StackMachine</code>类完成解析。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StackMachine</span> <span class="hljs-title">inherits</span> <span class="hljs-title">IO</span></span>&#123;<br>   mystack: Stack&lt;-<span class="hljs-keyword">new</span> Stack;<br>   mya2i: A2I&lt;-<span class="hljs-keyword">new</span> A2I;<br>   print_list(l : List) : Object &#123;<br>      <span class="hljs-keyword">if</span> l.isNil() then <span class="hljs-number">0</span><br>                   <span class="hljs-keyword">else</span> &#123;<br>   out_string(l.head());<br>   out_string(<span class="hljs-string">&quot;\n&quot;</span>);<br>   print_list(l.tail());<br>      &#125;<br>      fi<br>   &#125;;<br><br>   readCommand(ch: String):Bool&#123;<br>      &#123;<br>         out_string(<span class="hljs-string">&quot;&gt;&quot;</span>);<br>         out_string(ch);<br>         out_string(<span class="hljs-string">&quot;\n&quot;</span>);<br>         <span class="hljs-keyword">if</span> ch = <span class="hljs-string">&quot;e&quot;</span> then &#123;<br>            let stacktop:String &lt;- mystack.top() in &#123;<br>               <span class="hljs-keyword">if</span> stacktop = <span class="hljs-string">&quot;+&quot;</span> then&#123;<br>                  mystack.pop();<br>                  let v1:String, v2:String in &#123;<br>                     v1&lt;-mystack.top();mystack.pop();<br>                     v2&lt;-mystack.top();mystack.pop();<br>                     mystack.push(mya2i.i2a(mya2i.a2i(v1)+mya2i.a2i(v2)));<br>                  &#125;;<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                  <span class="hljs-keyword">if</span> stacktop = <span class="hljs-string">&quot;s&quot;</span> then&#123;<br>                     mystack.pop();<br>                     let v1:String, v2:String in &#123;<br>                     v1&lt;-mystack.top();mystack.pop();<br>                     v2&lt;-mystack.top();mystack.pop();<br>                     mystack.push(v1);<br>                     mystack.push(v2);<br>                  &#125;;<br>                  &#125;<br>                  <span class="hljs-keyword">else</span>&#123;<br>                     <span class="hljs-number">0</span>;<br>                  &#125;<br>                  fi;<br>               &#125;<br>               fi;<br>            &#125;;<br>            <span class="hljs-keyword">true</span>;<br>         &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> ch = <span class="hljs-string">&quot;d&quot;</span> then&#123;<br>               print_list(mystack.list());<br>               <span class="hljs-keyword">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>               <span class="hljs-keyword">if</span> ch = <span class="hljs-string">&quot;x&quot;</span>then&#123;<br>                  <span class="hljs-keyword">false</span>;<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                  mystack.push(ch);<br>                  <span class="hljs-keyword">true</span>;<br>               &#125;<br>               fi;<br>            &#125;<br>            fi;<br>         &#125;<br>         fi;<br>      &#125;<br>   &#125;;<br><br>   <br>&#125;;<br></code></pre></td></tr></table></figure><p>不是特别熟悉<code>cool</code>，所以代码写的挺烂的。</p><p>最后在主函数调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-title">inherits</span> <span class="hljs-title">IO</span> </span>&#123;<br><br>   main() : Object &#123;<br>      let mystackmachine:StackMachine&lt;-<span class="hljs-keyword">new</span> StackMachine in &#123;<br>         <span class="hljs-keyword">while</span> mystackmachine.readCommand(in_string())loop<br>            <span class="hljs-number">0</span><br>         pool;<br>      &#125;<br>   &#125;;<br><br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>compilers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>COOL语言入门（正在更新中）</title>
    <link href="/2021/01/26/cool-01/"/>
    <url>/2021/01/26/cool-01/</url>
    
    <content type="html"><![CDATA[<blockquote><p><strong>说明</strong></p><p>本文为笔者学习CS 143过程中，阅读Cool Manual所做笔记（基本上是内容的翻译以及简化）。</p></blockquote><h3 id="什么是cool"><a href="#什么是cool" class="headerlink" title="什么是cool"></a>什么是<code>cool</code></h3><p><code>cool</code>的全称是Classroom Object-Oriented Language，是Standford为了教学而创造的一种编程语言。CS 143 课程的Programming Assignment 就是完成<code>cool</code>语言的编译器。</p><h3 id="cool的主要特性"><a href="#cool的主要特性" class="headerlink" title="cool的主要特性"></a><code>cool</code>的主要特性</h3><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p><code>cool</code>使用<code>coolc</code>进行编译，编译指令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ [cool root]/bin/coolc [ -o fileout ] file1.cl file2.cl ... filen.cl<br></code></pre></td></tr></table></figure><p>和<code>gcc</code>语法类似，<code>-o</code>之后为输出的文件名（该项可选，默认为之后跟着的第一个文件名+<code>.s</code>）；<code>file1.cl, file2.cl</code>为需要编译的源程序文件名（<code>cool</code>的文件后缀为<code>.cl</code>）。</p><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p><code>coolc</code>输出的是MIPS汇编指令，可以通过<code>spim</code>运行（<code>spim</code>实际上就是MIPS倒过来）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ [cool root]/bin/spim<br>(spim) load <span class="hljs-string">&quot;file.s&quot;</span><br>(spim) run<br></code></pre></td></tr></table></figure><p>一般使用如下语句直接进行编译：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ [cool root]/bin/spim -file file.s<br></code></pre></td></tr></table></figure><h4 id="语法特性"><a href="#语法特性" class="headerlink" title="语法特性"></a>语法特性</h4><h5 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h5><p><code>cool</code>中的所有代码都组织成类。每一个类的所有内容必须被包括在一个源文件中，一个源文件可以包括多个类。</p><p>类定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">class &lt;type&gt; [ inherits &lt;type&gt; ] &#123;<br>&lt;feature_list&gt;<br>&#125;;<br></code></pre></td></tr></table></figure><p>所有的类名（type）都是全局可见的，需要以大写字母开头；类名不可以重复。</p><h6 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h6><p>在<code>cool</code>中，属性（成员变量）以及方法（method）被称作feature。</p><h6 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h6><p><code>cool</code>支持继承机制，并且只支持单继承。与<code>Java</code>类似，如果一个类没有显式声明的一个类，那么其默认继承<code>Object</code>。</p><h5 id="Types"><a href="#Types" class="headerlink" title="Types"></a>Types</h5><p><code>cool</code>语言中提供了类型机制，支持在编译时进行类型检查。</p><h6 id="self-type"><a href="#self-type" class="headerlink" title="self type"></a>self type</h6><p>self type 用于class，其类型不固定。根据上下文决定。</p>]]></content>
    
    
    
    <tags>
      
      <tag>compilers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【折腾】脱胎换骨的 断桨</title>
    <link href="/2021/01/25/%E6%8D%A3%E9%BC%93%EF%BC%81/"/>
    <url>/2021/01/25/%E6%8D%A3%E9%BC%93%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h3 id="为什么使用hexo建站"><a href="#为什么使用hexo建站" class="headerlink" title="为什么使用hexo建站"></a>为什么使用hexo建站</h3><p>之前使用namesilo购买过一个域名，使用aliyun配合Wordpress建立了一个小站：</p><p><img src="https://cdn.jsdelivr.net/gh/Mellorsssss/PictureBed/img/20210125224831.png" alt="Wordpress建站"></p><p>emmm……看起来有一点朴素。使用Wordpress的过程中，我主要感受到了以下的几个问题：</p><ol><li>配置不自由。自带的主题过少，一些高质量的主题需要氪金（不过也没有什么特别喜欢的风格）；</li><li>服务器配置过低。这是我自身的原因，我在aliyun上租的是一个一核的服务器，实在是不太行，每一次访问站点的时候都卡的不行，服务器还崩过几次（明明没有人访问啊！）；</li><li>写作必须要在线环境。似乎没有找到什么本地写作，然后远程自动更新的方式（可能还是我太菜了），每一次想要写作的时候，都要在Wordpress 的后台上写，实在是不方便啊！</li><li>要备案。我是一条懒狗，到现在还没有备案（苦笑）。</li></ol><p>相比之下，我通过hexo + GithubPages配置的过程就十分轻松了：</p><ol><li>hexo 本身只需要一些简单的配置（node.js之类，也就是命令行随便敲一敲）；</li><li>GithubPages更是一步解决了服务器以及备案的问题（国外的服务器，不需要备案了）；</li><li>hexo 支持本地编辑。hexo 目前使用下来就是本地写作,然后<code>hexo g&amp;hexo d</code>素质三连，十分符合我的写作习惯；</li><li>定制化空间高。比如我现在使用的主体就来自一个开源的项目，颜值在线。</li></ol><h3 id="新的断桨，将会包含哪些内容？"><a href="#新的断桨，将会包含哪些内容？" class="headerlink" title="新的断桨，将会包含哪些内容？"></a>新的断桨，将会包含哪些内容？</h3><blockquote><p> 博客只是一个载体，重要的是内部承载的内容。</p></blockquote><p>目前的想法是，连载自己的<strong>课程笔记、读书笔记、项目介绍</strong>等专业性比较强的内容的同时，也加入一些诸如<strong>漫评、影评</strong>的娱乐性内容。</p>]]></content>
    
    
    
    <tags>
      
      <tag>折腾</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lexier</title>
    <link href="/2021/01/25/Lexer/"/>
    <url>/2021/01/25/Lexer/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是Lexcial-Analyzer"><a href="#什么是Lexcial-Analyzer" class="headerlink" title="什么是Lexcial Analyzer"></a>什么是Lexcial Analyzer</h3><p>我们知道，编译器的输入是源程序(source program)，然而，编译器无法直接<strong>理解</strong>程序中的<strong>字符串</strong>（尽管他们是结构化的语言），需要进行进一步的结构化。</p><p><img src="https://cdn.jsdelivr.net/gh/Mellorsssss/PictureBed/img/20210125222819.png" alt="image-20210125222819890"></p>]]></content>
    
    
    
    <tags>
      
      <tag>compilers</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>你好！过客</title>
    <link href="/2021/01/25/NewBegin/"/>
    <url>/2021/01/25/NewBegin/</url>
    
    <content type="html"><![CDATA[<p>你是现在世界上少数几个知道本网站存在的人之一，恭喜你，幸运儿！</p><p>以下是对博客框架<code>hexo</code>以及博客主题<code>Fluid</code>的一些简单测试，并没有什么具体的含义。</p><h3 id="渲染方程"><a href="#渲染方程" class="headerlink" title="渲染方程"></a>渲染方程</h3><script type="math/tex; mode=display">L_o(p,w_o) = L_e(p, w_o) + \int_{\Omega^+}L_i(p,w_i)f_r(p, w_i,w_o)cos\theta\ d\omega</script><h3 id="Path-Tracing伪代码"><a href="#Path-Tracing伪代码" class="headerlink" title="Path Tracing伪代码"></a><code>Path Tracing</code>伪代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">shade (p, w_o):<br>blabla<br>......<br>    <span class="hljs-keyword">return</span> L_dir + L_indir<br></code></pre></td></tr></table></figure><h3 id="寒假计划"><a href="#寒假计划" class="headerlink" title="寒假计划"></a>寒假计划</h3><ol><li>吃</li><li>喝</li><li>睡</li></ol><h4 id="来一些图表"><a href="#来一些图表" class="headerlink" title="来一些图表"></a>来一些图表</h4><p>测试图床：</p><p><img src="https://cdn.jsdelivr.net/gh/Mellorsssss/PictureBed/img/20210125223350.png" alt="image-20210125223350250"></p><p>测试表格：</p><div class="table-container"><table><thead><tr><th>id</th><th>名称</th><th>属性</th></tr></thead><tbody><tr><td>1</td><td>皮卡丘</td><td>电系</td></tr><tr><td>2</td><td>喷火龙</td><td>火，飞行</td></tr><tr><td>3</td><td>迪奥西斯</td><td>超能</td></tr></tbody></table></div><h3 id="测试各种简单的语法"><a href="#测试各种简单的语法" class="headerlink" title="测试各种简单的语法"></a>测试各种简单的语法</h3><p><strong>如果让你重新来过，你会不会爱我</strong></p><blockquote><p>爱情让人拥有快乐，也会带来折磨</p></blockquote><p>We used to be lovers.</p>]]></content>
    
    
    
    <tags>
      
      <tag>杂记</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
